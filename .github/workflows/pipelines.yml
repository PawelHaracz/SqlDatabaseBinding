name: 'Build and push to nuget'
on: 
  
  push:
    branches:
      - 'master'
    tags-ignore:
      - '*'
    paths-ignore:
      - 'README.md'
      - '.github/*'
  pull_request:
    branches:
    - 'feature/*'
  workflow_dispatch:

jobs:
  build:
    runs-on: 'windows-latest'
    env:
      BuildConfiguration: "Release"
      ProjectsPath :  '**/*.MSSqlDatabase.csproj'
    name: Build application
    steps:
      - uses: actions/checkout@v2
      
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'

      - name: Determine Version
        id:   gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7
        with:
          useConfigFile: true
          configFilePath: SqlDatabaseBinding/GitVersion.yml
                      
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.x
      
      - name: Build
        run: dotnet build -c $(BuildConfiguration) -p:Version=${{ steps.gitversion.outputs.nuGetVersion }}  
      
      - name: Pack
        run: dotnet pack -p:Version=${{ steps.gitversion.outputs.nuGetVersion }} --no-build

  # publish:
  #   runs-on: 'windows-latest'
  #   name: publish nuget
  #   needs: [build]
  #   if: ${{ success() }}
  #   steps:
  #     - task: NuGetCommand@2
  #       displayName: 'Nuget push'
  #       condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  #       inputs:
  #         command: 'push'
  #         packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
  #         nuGetFeedType: 'external'
  #         publishFeedCredentials: 'Nuget.org'
  #     - task: GitHubTag@1
  #       displayName: "Git Hub tag"
  #       condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  #       inputs:
  #         githubEndpoint: 'PawelHaracz'
  #         repositoryName: '$(Build.Repository.Name)'
  #         tag: 'v$(GitVersion.NuGetVersion)'